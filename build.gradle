buildscript {
    ext {
        springBootVersion = '1.3.0.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")

        classpath 'org.jooq:jooq-codegen:3.7.1'
        classpath 'org.postgresql:postgresql:9.4-1206-jdbc42'
    }
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'

jar {
    baseName = 'jugmontpellier-spock-demo'
    version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-jooq'
    compile 'org.postgresql:postgresql:9.4-1206-jdbc42'

    // Live reload
    compile 'org.springframework.boot:spring-boot-devtools'

    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'org.codehaus.groovy:groovy-all:2.4.+'
    testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
    testCompile 'org.spockframework:spock-spring:1.0-groovy-2.4'

    testCompile 'org.hamcrest:hamcrest-core:1.3'        // only necessary if Hamcrest matchers are used
    testCompile 'org.skyscreamer:jsonassert:1.2.3'
    testRuntime 'cglib:cglib-nodep:3.1'                 // allows mocking of classes (in addition to interfaces)
    testRuntime 'org.objenesis:objenesis:2.1'           // allows mocking of classes without default constructor (together with CGLIB)
}

task('jooqGenerate') << {
    // JOOQ
    // Use your favourite XML builder to construct the code generation configuration file
    // ----------------------------------------------------------------------------------
    def writer = new StringWriter()
    def xml = new groovy.xml.MarkupBuilder(writer)
            .configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.7.0.xsd') {
        jdbc() {
            driver('org.postgresql.Driver')
            url('jdbc:postgresql://localhost:5432/spock_demo')
            user('postgres')
            password('postgres')
        }
        generator() {
            database() {
                setName 'org.jooq.util.postgres'
                inputSchema 'public'
            }
            generate() {
                pojos true
                daos true
            }
            target() {
                packageName('com.jugmontpellier.jooq')
                directory('src/main/java')
            }
        }
    }

    // Run the code generator
    // ----------------------
    org.jooq.util.GenerationTool.generate(
            javax.xml.bind.JAXB.unmarshal(new StringReader(writer.toString()), org.jooq.util.jaxb.Configuration.class)
    )
}
