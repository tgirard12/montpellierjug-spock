/**
 * This class is generated by jOOQ
 */
package com.jugmontpellier.jooq.tables.records;


import com.jugmontpellier.jooq.tables.Speaker;

import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SpeakerRecord extends UpdatableRecordImpl<SpeakerRecord> implements Record4<UUID, String, String, String> {

	private static final long serialVersionUID = 1077751414;

	/**
	 * Setter for <code>public.SPEAKER.id_speaker</code>.
	 */
	public void setIdSpeaker(UUID value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>public.SPEAKER.id_speaker</code>.
	 */
	public UUID getIdSpeaker() {
		return (UUID) getValue(0);
	}

	/**
	 * Setter for <code>public.SPEAKER.name_</code>.
	 */
	public void setName_(String value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>public.SPEAKER.name_</code>.
	 */
	public String getName_() {
		return (String) getValue(1);
	}

	/**
	 * Setter for <code>public.SPEAKER.mail</code>.
	 */
	public void setMail(String value) {
		setValue(2, value);
	}

	/**
	 * Getter for <code>public.SPEAKER.mail</code>.
	 */
	public String getMail() {
		return (String) getValue(2);
	}

	/**
	 * Setter for <code>public.SPEAKER.twitter</code>.
	 */
	public void setTwitter(String value) {
		setValue(3, value);
	}

	/**
	 * Getter for <code>public.SPEAKER.twitter</code>.
	 */
	public String getTwitter() {
		return (String) getValue(3);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<UUID> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record4 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row4<UUID, String, String, String> fieldsRow() {
		return (Row4) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row4<UUID, String, String, String> valuesRow() {
		return (Row4) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<UUID> field1() {
		return Speaker.SPEAKER.ID_SPEAKER;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field2() {
		return Speaker.SPEAKER.NAME_;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field3() {
		return Speaker.SPEAKER.MAIL;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field4() {
		return Speaker.SPEAKER.TWITTER;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UUID value1() {
		return getIdSpeaker();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value2() {
		return getName_();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value3() {
		return getMail();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value4() {
		return getTwitter();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public SpeakerRecord value1(UUID value) {
		setIdSpeaker(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public SpeakerRecord value2(String value) {
		setName_(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public SpeakerRecord value3(String value) {
		setMail(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public SpeakerRecord value4(String value) {
		setTwitter(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public SpeakerRecord values(UUID value1, String value2, String value3, String value4) {
		value1(value1);
		value2(value2);
		value3(value3);
		value4(value4);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached SpeakerRecord
	 */
	public SpeakerRecord() {
		super(Speaker.SPEAKER);
	}

	/**
	 * Create a detached, initialised SpeakerRecord
	 */
	public SpeakerRecord(UUID idSpeaker, String name_, String mail, String twitter) {
		super(Speaker.SPEAKER);

		setValue(0, idSpeaker);
		setValue(1, name_);
		setValue(2, mail);
		setValue(3, twitter);
	}
}
